# -*- coding: utf-8 -*-
"""Heart Disease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mu0GuzWgzeHuJuSHLQobYI4X9ciDVXo5
"""

# !pip install klib

# from google.colab import files

# uploaded = files.upload()

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objs as go
import plotly.express as px
import plotly.subplots as sp
from plotly.subplots import make_subplots
import plotly.figure_factory as ff


from scipy.stats import f_oneway
from scipy.stats import f
from scipy.stats import chi2
from scipy.stats import chi2_contingency
from scipy.stats import norm
from scipy.stats import ttest_ind
from scipy.stats import t


from typing import List

# Our Coded Functions

# from HypothesisTest import HypothesisTest as hp

pd.set_option('display.max_columns', None)

"""## **Reading Dataset**"""

disease = pd.read_csv('heart_disease.csv')

h_d = disease.copy()

"""## **Checking The Dataset**"""

h_d.head(10)

h_d.prevalentHyp.unique()

h_d.info()

h_d.describe()

"""## **Checking the percentage of Null values in each feature**"""

h_d_nulls = h_d.isnull().mean() * 100
h_d_nulls

h_d.isnull().sum()

"""## **Plotting the Missing Values**"""

fig = px.imshow(h_d.isnull(), color_continuous_scale='thermal')

fig.update_layout(
    title = {
        'text' : "Distribution of Null Values",
        'x' : 0.5,
        'y' : 0.98
    },
    width = 900,
)
fig.show()

"""## **Destribution of Numerical columns with nulls**"""

num_col_w_nulls = ['cigsPerDay' , 'totChol' ,'BMI' ,'heartRate', 'glucose']
def null_num_col_dest(rows, cols, catg_cols):

  fig = sp.make_subplots(rows=rows, cols=cols)

  idx  = 0


  for r in range(1, rows + 1):
    for c in range(1, cols + 1):

      col = catg_cols[idx]
      idx += 1

      data = h_d[col]

      # data.rename(columns = {'index': col, col : 'frequency'}, inplace = True)


      trace = go.Histogram(x=data, nbinsx=20)

      fig.add_trace(trace, row = r, col = c)

      fig.update_xaxes(title_text=col, row=r, col=c)
      fig.update_yaxes(title_text="frequency", row=r, col=c)

      if idx == 5 : break


  fig.update_layout(
      title={
          'text': "Distribution of numerical features Having NA's ",
          'y': 0.989,
          'x': 0.5,
          'xanchor': 'center',
          'yanchor': 'top',
          'font' : {
              'color' : '#393646',
              'family' : 'Bold', 
              'size' : 26
          } 
          
      },
      
      showlegend = False, 
      height = 600,
      width = 1200
  )


  fig.show()

null_num_col_dest(2, 3, num_col_w_nulls)

"""### **Filling the NA's using Mean and Median**"""

num_col_w_nulls
# ['cigsPerDay' , 'totChol' ,'BMI' ,'heartRate', 'glucose']
h_d_no_null = h_d.copy()

solve_col = []

for col in num_col_w_nulls:
  
  mean = h_d[col].mean()
  median = h_d[col].median()

  h_d_no_null[col + "_mean"] = h_d[col].fillna(mean)
  h_d_no_null[col + "_median"] = h_d[col].fillna(median)

  solve_col.append(col)
  solve_col.append(col + "_mean")
  solve_col.append(col + "_median")

# solve_col = ['age', 'age_mean', 'age_median', 'cigsPerDay', 'cigsPerDay_mean', 'cigsPerDay_median', 'totChol_year', 'totChol_year_mean',
#              'totChol_year_median', 'sysBP', 'sysBP_mean', 'sysBP_median', ]

len(solve_col)

"""### Checking the basic statistical difference"""

h_d_no_null[solve_col].describe()

"""### Checking the Variance Difference"""

idx = 1

original = h_d_no_null[solve_col[0]].var()

for col in solve_col:
  change = 0
  variance = h_d_no_null[col].var()
  
  prct = 100 - (variance / original) * 100

  print(f"{col} Variance: {variance:.2f} ({prct:.2f}% Difference)")
  
  if idx % 3 == 0:
    change = 1
    print(" ")

  idx += 1

  if change and idx < len(solve_col):
    original = h_d_no_null[solve_col[idx - 1]].var()

"""#### **Plotting the Distribution Difference**"""

fig, axs = plt.subplots(2, 3, figsize=(14, 8))

idx = 0

for r in range(2):
  for c in range(3):

    col = num_col_w_nulls[idx]

    sns.kdeplot(data=h_d_no_null[col], ax=axs[r, c], label="Original")
    sns.kdeplot(data=h_d_no_null[col + "_mean"], ax=axs[r, c], label=col.title() + " Mean")
    sns.kdeplot(data=h_d_no_null[col + "_median"], ax=axs[r, c], label=col.title() + " Median")
    axs[r, c].set_title(col.upper() + " Distribution")
    axs[r, c].set_xlabel(col.upper())
    axs[r, c].legend()

    idx += 1

    if idx == 5: break

fig.suptitle("Distribution difference after fillup the NA's using mean and median", fontsize=16, fontweight="bold")

plt.tight_layout(pad = 3.0)
plt.show()

"""#### **Based on the distribution analysis, it is observed that there are certain columns that demonstrate less variation in distribution after filling the missing values with the mean. These columns include totchol, bmi, heartrate, glucose.**

#### **On the other hand, in cigsperday feature the distribution shows significantly less variation after filling the missing values with the median.Therefore, we have to use the median to fill the missing values in these columns.** 
"""

mean_fill = ['totChol', 'BMI', 'heartRate', 'glucose']
median_fill = 'cigsPerDay'

h_d_no_null[mean_fill] = h_d_no_null[['totChol_mean', 'BMI_mean', 'heartRate_mean', 'glucose_mean']]

h_d_no_null[median_fill] = h_d_no_null['cigsPerDay_median']

"""## **Handling the missing values of Categorical columns**"""

catg_col_w_nulls = ['education', 'BPMeds']

"""### **Plotting the Destribution of catg columns having null values**"""

def solve_catg_col_dest(catg_cols, title, rows = 1, cols = 2):

  fig = sp.make_subplots(rows=rows, cols=cols)

  idx  = 0


  for r in range(1, rows + 1):
    for c in range(1, cols + 1):

      col = catg_cols[idx]
      idx += 1

      data = h_d_no_null[col].value_counts().sort_values(ascending = False).reset_index()

      data.rename(columns = {'index': col, col : 'frequency'}, inplace = True)


      trace = go.Bar(x = data[col], y = data['frequency'])

      fig.add_trace(trace, row = r, col = c)

      fig.update_xaxes(title_text=col, row=r, col=c)
      fig.update_yaxes(title_text="frequency", row=r, col=c)



  fig.update_layout(
      title={
          'text': title,
          'y': 0.989,
          'x': 0.5,
          'xanchor': 'center',
          'yanchor': 'top',
          'font' : {
              'color' : '#393646',
              'family' : 'Bold', 
              'size' : 26
          } 
          
      },
      
      showlegend = False, 
      height = 600,
      width = 1200
  )


  fig.show()

solve_catg_col_dest(catg_col_w_nulls, title = "Distribution of Categorical Columns Having NA's")

h_d_no_null["BPMeds"].value_counts().sort_values(ascending = False).reset_index()

"""### **Checking the Percentage of null values in these columns**"""

h_d_no_null[catg_col_w_nulls].isnull().mean() * 100

"""### **Handling Occupation Columns (Using Mode to fill NA's)**

"""

solve_catg_col = []

for col in catg_col_w_nulls:

  mode = h_d_no_null[col].mode()[0]

  h_d_no_null[col + "_mode"] = h_d[col].fillna(mode)

  solve_catg_col.append(col)
  solve_catg_col.append(col + "_mode")

solve_catg_col

solve_catg_col_dest(solve_catg_col, "Distribution of Categorical Cols Before and After Solving NA's", 2, 2)

h_d_no_null[['education', 'BPMeds']] = h_d_no_null[['education_mode', 'BPMeds_mode']]

col = h_d.columns
h_d_no_null = h_d_no_null[col]

"""## **Handling Outliers**

### **Plotting the destribution to identify any outliers**
"""

h_d_no_null.head(3)

num_colms = ['age', 'totChol', 'cigsPerDay', 'sysBP', 'diaBP', 'BMI', 'heartRate', 'glucose']

fig = sp.make_subplots(rows=2, cols=4, vertical_spacing = 0.14, horizontal_spacing = 0.05)

idx = 0

for r in range(1, 3):
  for c in range(1, 5):

    col = num_colms[idx]
    idx+=1

    trace = go.Box(x=h_d_no_null[col], orientation='h', boxpoints='suspectedoutliers', boxmean=True)

    fig.add_trace(trace, row=r, col=c)
    fig.update_yaxes(showticklabels=False)
    fig.update_xaxes(title_text=col, row=r, col=c)


fig.update_layout(
    title={
        'text': 'Distribution of numerical Columns',
        'y': 0.989,
        'x': 0.5,
        'xanchor': 'center',
        'yanchor': 'top',
        'font' : {
            'color' : '#393646',
            'family' : 'Bold', 
            'size' : 26
        } 
        
    },
     
    showlegend = False, 
    height = 800,
    width = 1400
)

fig.show()

"""### **Summery Statistics of outliers in each columns**"""

def get_limit(col):

  perct_25 = col.quantile(0.25)
  perct_75 = col.quantile(0.75)

  IQR = perct_75 - perct_25

  upper_limit = perct_75 + (1.5 * IQR)
  lower_limit = perct_25 - (1.5 * IQR)

  return upper_limit, lower_limit

cols_wth_outl = []

for col in num_colms:

  data = h_d_no_null[col]

  upper_bound, lower_bound = get_limit(data)
   
  outliers = data[(data < lower_bound) | (data > upper_bound)]

  outlier_count = len(outliers)
  total_count = len(data)
  outlier_percent = outlier_count/total_count * 100

  print(f"{col.title()} Percentage : {outlier_percent : .2f}%")

  if outlier_percent != 0:

    cols_wth_outl.append(col)

    mean_outliers = np.mean(outliers)
    median_outliers = np.median(outliers)
    std_outliers = np.std(outliers)

    print(f"{col.title()} Mean       : {mean_outliers : .2f}")
    print(f"{col.title()} Median     : {median_outliers : .2f}")
    print(f"{col.title()} Std        : {std_outliers : .2f}")

  print()

"""#### **From the above analysis we can see feature that have outliers are 'totChol', 'cigsPerDay', 'totChol', 'sysBP', 'diaBP', 'BMI', 'heartRate', 'glucose'**"""

cols_wth_outl = ['totChol', 'cigsPerDay', 'totChol', 'sysBP', 'diaBP', 'BMI', 'heartRate', 'glucose']
cols_wth_outl

h_d_no_null[cols_wth_outl].describe()

"""#### **Using Capping Method to handle outliers**"""

def get_limit(col):

  perct_25 = col.quantile(0.25)
  perct_75 = col.quantile(0.75)

  IQR = perct_75 - perct_25

  upper_limit = perct_75 + (1.5 * IQR)
  lower_limit = perct_25 - (1.5 * IQR)

  return upper_limit, lower_limit


h_d_no_outl = h_d_no_null.copy()

# Iterate through columns with outliers
for col in cols_wth_outl:

  upper_limit, lower_limit = get_limit(h_d_no_outl[col])

  # Replace values outside of the upper and lower limits with the respective limit
  h_d_no_outl[col] = np.where(
      h_d_no_outl[col] > upper_limit, 
      upper_limit,
      np.where(
          h_d_no_outl[col] < lower_limit,
          lower_limit,
          h_d_no_outl[col]
      )
  )

h_d_no_outl['cigsPerDay'].unique()

col = h_d_no_outl['cigsPerDay']
print(get_limit(col))

"""#### **Destribution of columns after solving the outliers** """

def outlier_dist_plt(df, cols_wth_outl, title, rows = 2, cols = 4):

  fig = sp.make_subplots(rows=rows, cols=cols)


  idx = 0

  for r in range(1, rows + 1):

    for c in range(1, cols + 1):

      col = cols_wth_outl[idx]
      idx += 1

      
      # trace = go.Box(x  = df[col], histnorm='density')
      trace = go.Box(x = df[col], orientation='h', boxpoints='suspectedoutliers', boxmean=True)

      fig.add_trace(trace, row = r, col = c)

      fig.update_xaxes(title = col, row = r, col = c)




  # fig.update_xaxes(range = [0, 100000], row = 1, col = 1)
  # fig.update_xaxes(range = [0, 1000], row = 1, col = 3)
  # fig.update_xaxes(range = [0, 500], row = 2, col = 1)
  fig.update_xaxes(range = [-50, 50], row = 1, col = 2)


  fig.update_yaxes(showticklabels=False)


  fig.update_layout(
      title={
          'text': title,
          'y': 0.989,
          'x': 0.5,
          'xanchor': 'center',
          'yanchor': 'top',
          'font' : {
              'color' : '#393646',
              'family' : 'Bold', 
              'size' : 26
          } 
          
      },

      
      showlegend = False, 
      height = 800,
      width = 1200
  )


  fig.show()

outlier_dist_plt(h_d_no_outl, cols_wth_outl, 'Distributoin of numeric columns After Solving Outliers')

"""## **Destribution of numerical features with respect to TenYearCHD**"""

catg_colms = [col for col in h_d_no_outl.columns if col not in num_colms]
num_colms

h_d_no_outl.head()

def box_plot(df, relevent_colms,title = 'Relationship between Numerical Features and Ten Year CHD', rows = 2, cols = 4) -> None:

  fig = sp.make_subplots(rows=rows, cols=cols, vertical_spacing = 0.20, horizontal_spacing = 0.1)

  idx = 0

  for r in range(1, rows + 1):
    for c in range(1, cols + 1):

      col = relevent_colms[idx]
      idx+=1


      trace1 = go.Box(x=df[df.TenYearCHD == 0][col], name='No', orientation='h', boxpoints='suspectedoutliers')
      trace2 = go.Box(x=df[df.TenYearCHD == 1][col], name='Yes', orientation='h', boxpoints='suspectedoutliers')

      fig.add_trace(trace1, row=r, col=c)
      fig.add_trace(trace2, row=r, col=c)


      fig.update_yaxes(title_text='Ten Year CHD', row=r, col=c)
      fig.update_xaxes(title_text=col, row=r, col=c)
  

  # fig.update_xaxes(range = [0, 500], row=2, col=1)

  fig.update_layout(
      title={
          'text': title,
          'y': 0.98,
          'x': 0.5,
          'xanchor': 'center',
          'yanchor': 'top',
          'font' : {
              'color' : '#393646',
              'family' : 'Bold', 
              'size' : 26
          } 
          
      },
      showlegend = False, 
      height = 800,
      width = 1200
  )

  fig.show()

box_plot(h_d_no_outl, num_colms)

"""### **Handling the outliers of the numerical features with respect to Ten_Year_CHD**"""

categories = [0, 1]
cols_wth_out = ['totChol' ,'sysBP', 'diaBP', 'BMI']


for col in cols_wth_out:
    for cat in categories:

        subset = h_d_no_outl[h_d_no_outl['TenYearCHD'] == cat][col]
        
        q1 = subset.quantile(0.25)
        q3 = subset.quantile(0.75)
        iqr = q3 - q1
        lower_bound = q1 - (1.5 * iqr)
        upper_bound = q3 + (1.5 * iqr)
        
        subset[subset < lower_bound] = lower_bound
        subset[subset > upper_bound] = upper_bound
        
        h_d_no_outl.loc[h_d_no_outl['TenYearCHD'] == cat, col] = subset

"""### **Destribution of these features after handling the outliers**"""

box_plot(h_d_no_outl, num_colms, title = 'Relationship between Numerical Features and Ten Year CHD after Handling Outliers')

def target_category_hist(df, title = "Relationship between Categorical Features and Ten Year CHD", break_point = 13, rows = 2, cols = 4 ):
  
  fig = make_subplots(rows=rows, cols=cols, subplot_titles=catg_colms[:-1], horizontal_spacing = 0.1)

  idx = 0

  great_customer = df[df['TenYearCHD'] == 1]
  not_great_customer = df[df['TenYearCHD'] == 0]

  for r in range(1, rows + 1):
    for c in range(1, cols + 1):

      col = catg_colms[idx]
      idx += 1

      fig.add_trace(
          go.Histogram(x=df[col], y=great_customer['TenYearCHD']),
          row=r, col=c

      )
      fig.add_trace(
          go.Histogram(x=df[col], y=not_great_customer['TenYearCHD']),
          row=r, col=c

      )
      sorted_values = sorted(df[col].unique())
      fig.update_xaxes(type='category',categoryorder='array', categoryarray=sorted_values, row=r, col=c)
      fig.update_yaxes(title = "Ten Year CHD", row=r, col=c)


      if idx == 13:
        break


  fig.update_layout(
      showlegend=False,
      height=800,
      width=1600,
      title_text=title,
      title_x = 0.5,
      title_y = 0.98,
      title_font_size = 22
  )


  fig.show()


target_category_hist(h_d_no_outl)

"""## **Statistical Test to Select Features**

#### **Doing Anova Test to numeric columns to determine the significance of predicting Ten Year CHD**

#### **Creating our own ANOVA Function**
"""

def anova_one(*categories) -> List[float]:

  # Flatten all the categories into one 1D array
  # grand = np.array(categories)
  # grand = grand.flatten()
  grand = []

  for outer in categories:
    for elm in outer:
      grand.append(elm)

  num_of_condition = len(categories)
  total_num_of_data = len(grand)

  # for catg in categories:
  #   total_num_of_data += len(catg)

  df_bw = num_of_condition - 1
  df_wtn = total_num_of_data - num_of_condition

  # Critical Value
  f_crit = f.ppf(q=1-.05, dfn=df_bw, dfd=df_wtn)
  
  grand_mean = np.mean(grand)
  mean_arr = [np.mean(x) for x in categories] 

  SST_numerator = grand

  # Sum of Squares Total Σ(x - x̄)^2
  SST = np.sum(np.apply_along_axis(lambda x: np.power(x - grand_mean, 2), 0, SST_numerator))

  # Sum of Squares Withing Σ(x1 - x̄1)^2 + Σ(x2 - x̄2)^2 + ... ... ... + Σ(xn - x̄n)^2
  SSW = 0
  temp = categories

  for catg in temp:

    catg_mean = np.mean(catg)

    SSW += np.sum(np.apply_along_axis(lambda x: np.power(x - catg_mean, 2), 0, catg))

  SSW = SSW

  # Sum of Squares Between
  SSBW = SST - SSW

  # Mean Squares Between
  MSBW =SSBW / df_bw

  # Mean Squares Within
  MSW = SSW / df_wtn

  f_stat = MSBW / MSW


  p_value = f.sf(f_stat, df_bw, df_wtn)

  return f_crit, f_stat, p_value

"""#### **Implementing Anova test with both our and built in functions and comparing it**"""

# Extracting the numerical columns
n = len(num_colms)

HC_anova = []
anova = []

for col in num_colms[ :n - 1]:

  col_0 = h_d_no_outl[h_d_no_outl["TenYearCHD"] == 0][col]
  col_1 = h_d_no_outl[h_d_no_outl["TenYearCHD"] == 1][col]

  f_stat, p_value = f_oneway(col_0, col_1)

  anova.append([col, f_stat, p_value])

  _, f_stat, p_value = anova_one(col_0, col_1)

  HC_anova.append([col, f_stat, p_value])

"""#### **Comparing my anova function to original anova**"""

for i in range(len(anova)):
  print(anova[i][0])
  print(f"stat = {anova[i][1]}, p_value = {anova[i][2]}")
  print(f"my_stat = {HC_anova[i][1]}, my_p_value = {HC_anova[i][2]}")
  print()

"""### **Doing Chi Square Test to categorical columns to determine the significance of predicting Ten Year CHD**

#### **Creating our Own Chi Square Function**
"""

def cross_tab(ind, dep):
  
  # Fetching the rows and columns for the table

  new_df = pd.DataFrame({
      'ind' : ind,
      'dep' : dep
  })


  rows = ind.unique()
  cols = dep.unique()

  cols.sort()
  cols

  table = []
  
  for row in rows:
    c = []
    for col in cols:
      slices = len(new_df[(new_df['ind'] == row) & (new_df['dep'] == col)])
      c.append(slices)

    table.append(c.copy())
    c = c.clear()

  table = pd.DataFrame(table, columns = cols, index = rows)

  sort_index = np.sort(table.index)

  table = table.reindex(sort_index)

  return table
  


def to_expected(observe):

  cols = observe.columns
  rows = observe.index

  grand_ttl = np.sum(np.sum(observe))

  expected = observe.copy()

  for row in rows:
    for col in cols:

      row_ttl = np.sum(observe.loc[row])
      col_ttl = np.sum(observe[col])
      
      expected.loc[row, col] = (row_ttl * col_ttl) / grand_ttl
  
  return expected

# print(to_expected(observe))
      

def chi_2_t(observed, expected):

  chi_square = np.sum(np.sum(np.power(observed - expected, 2) / expected))


  row_count = len(observed.index)
  col_count = len(observed.columns)
  
  df = (row_count - 1) * (col_count - 1)

  p_value = 1 - chi2.cdf(chi_square, df)

  return chi_square, p_value

h_d_no_outl[catg_colms].head()

"""### **Comparing my Chi2 functions with built in functions**



"""

chi2_test = []
HC_chi2 = []

for col in catg_colms[:-1]:

  HC_observe = cross_tab(h_d_no_outl[col], h_d_no_outl['TenYearCHD'])
  HC_expected = to_expected(HC_observe)

  chi_square,p_values, _, _ = chi2_contingency(HC_observe, correction = False)
  HC_chi_square, HC_p_values = chi_2_t(HC_observe, HC_expected)

  chi2_test.append([chi_square,p_values])
  HC_chi2.append([col, HC_chi_square, HC_p_values])

for i in range(len(HC_chi2)):
  print(HC_chi2[i][0])
  print(f"stat = {chi2_test[i][0]}, p_value = {chi2_test[i][1]}")
  print(f"my_stat = {HC_chi2[i][1]}, my_p_value = {HC_chi2[i][2]}")
  print()

"""#### **Yates correction**

## **Feature Selection Based on P value**
"""

p_values_num = {anova[i][0] : anova[i][2] for i in range(len(anova))}
p_values_catg = {HC_chi2[i][0] : HC_chi2[i][2] for i in range(len(HC_chi2))}

p_values  = dict(p_values_num)
p_values.update(p_values_catg)

sort_p_values = sorted(p_values.items(), key = lambda x: x[1])
sort_p_values

"""**The null hypothesis for each p-value is that there is no relationship between the feature and TenYearCHD. Therefore, if the p-value is less than the significance level (usually 0.05), we can reject the null hypothesis and conclude that there is a significant relationship between the feature and TenYearCHD.**

**From the above p-values, we can see that all the features except 'heartRate' and 'currentSmoker' have p-values less than 0.05. This means that these features are statistically significant and have a significant relationship with TenYearCHD.**

**Therefore, the significant features based on the given p-values are:**

**prevalentHyp, age, sysBP, diaBP, diabetes, male, BPMeds, totChol, education, BMI, prevalentStroke, cigsPerDay**

**We can formally state that there is a statistically significant relationship between TenYearCHD and the above mentioned features at a significance level of 0.05.**

# **Relevant Exploratory Data Analysis**
"""

df = h_d_no_outl.copy()

"""**1. What is the relationship between total cholesterol levels and systolic blood pressure, and how does this impact the risk of developing heart disease?**"""

fig = px.scatter(df, x="totChol", y="sysBP", color="TenYearCHD", 
                 hover_name="TenYearCHD", trendline="ols")

corr_coef = df['totChol'].corr(df['sysBP'])

fig.update_layout(

    title = {
        'text' : f"Relationship between Total Cholesterol Levels and Systolic Blood Pressure {corr_coef:.2f}",
        'x' : 0.5,
        'y' : 0.98
    },
    xaxis_title="Total Cholesterol Levels",
    yaxis_title="Systolic Blood Pressure"
)

fig.show()

cholesterol_bp = df[['totChol', 'sysBP']]

corr = cholesterol_bp.corr(method='pearson').iloc[0,1]

print(corr)

"""The correlation value of 0.2132 indicates a positive correlation between total cholesterol levels and systolic blood pressure. This means that as the levels of total cholesterol increase, the systolic blood pressure tends to increase as well. However, the strength of this correlation is only moderate, suggesting that other factors may also contribute to variations in blood pressure and cholesterol levels. Furthermore, it is important to note that correlation does not imply causation, and further investigation would be needed to establish a causal relationship between these variables and the risk of developing heart disease.

**2. Is there a correlation between BMI and heart rate, and does this vary between smokers and non-smokers?**
"""

fig = px.scatter(df, x='BMI', y='heartRate', color='currentSmoker')

corr_coef  = df['BMI'].corr(df['heartRate'])

fig.update_layout(
    title = {
        'text' : f"Relationship between BMI and Heart Rate {corr_coef:.2f}",
        'x' : 0.5,
        'y' : 0.97,
        'font_size' : 18
    },
    xaxis_title='BMI',
    yaxis_title='Heart Rate'
)

fig.show()

"""The correlation coefficient of 0.06 suggests a weak positive correlation between BMI and heart rate. However, this correlation is not statistically significant or practically meaningful.

**3. What is the distribution of glucose levels among patients with and without diabetes, and does this have any impact on the risk of developing heart disease?**
"""

fig = make_subplots(rows=1, cols=2, subplot_titles=("Glucose levels among patients with diabetes", "Glucose levels among patients without diabetes"))



fig.add_trace(go.Histogram(x=h_d_no_outl[h_d_no_outl["diabetes"]==1]["glucose"], nbinsx=20, name="Diabetes"), row=1, col=1)
fig.add_trace(go.Histogram(x=h_d_no_outl[h_d_no_outl["diabetes"]==0]["glucose"], nbinsx=20, name="No Diabetes"), row=1, col=2)


fig.update_xaxes(title_text="Glucose level", row=1, col=1)
fig.update_xaxes(title_text="Glucose level", row=1, col=2)
fig.update_yaxes(title_text="Count", row=1, col=1)
fig.update_yaxes(title_text="Count", row=1, col=2)

"""The distribution of glucose levels among patients with and without diabetes reveals distinct patterns. Patients with diabetes exhibit higher glucose levels, with the majority exceeding 100. In contrast, patients without diabetes show a relatively normal distribution of glucose levels, centered around 80 or above. This shows that those who have diabetes are more likely to have increased glucose levels, which may also be a sign of the disease. Additionally, the finding that people without diabetes also have a considerable percentage of blood sugar levels that are above 80 suggests that there may be a link between blood sugar levels and an increased risk of developing heart disease.

**4. How does the average number of cigarettes smoked per day vary across different age groups in the dataset?**
"""

df = h_d_no_outl.copy()

df["age_group"] = pd.cut(df["age"], bins=[0,40,50,60,70], labels=["<40","40-49","50-59", "60-69"])


# Create a box plot of cigsPerDay distribution for each age group
fig = px.box(df, x="age_group", y="cigsPerDay", color="age_group")

# Set the plot title and axis titles
fig.update_layout(title = {
                    "text" : "Distribution of cigarettes smoked per day among different age groups",
                    'y'    : 0.98,
                    'x'    : 0.5
                  },
                  xaxis_title="Age group",
                  yaxis_title="Number of cigarettes smoked per day",
                  height = 600,
                  width = 1200
)

# Show the plot
fig.show()

"""The distribution of the number of cigarettes smoked per day among different age groups reveals interesting patterns. Among individuals aged up to 50 years, there is a notable presence of heavy smokers, with some individuals reporting up to 50 cigarettes per day. However, as the age increases to 60 years and above, the number of heavy smokers decreases significantly. This suggests that older individuals tend to smoke fewer cigarettes per day on average. Furthermore, the distribution of cigarette consumption among individuals below 40 years appears to follow a relatively normal pattern.

**5. Is there a significant difference in the average BMI between patients who do and do not take blood pressure medication?**
"""

meds = df[df["BPMeds"] == 1]["BMI"]
no_meds = df[df["BPMeds"] == 0]["BMI"]

fig = make_subplots(rows = 1, cols = 2)


fig.add_trace(go.Histogram(x=meds, nbinsx=20, name="Meds"), row=1, col=1)
fig.add_trace(go.Histogram(x=no_meds, nbinsx=20, name="No Meds"), row=1, col=2)


fig.update_xaxes(title_text="Meds level", row=1, col=1)
fig.update_xaxes(title_text="No Meds level", row=1, col=2)
fig.update_yaxes(title_text="Count", row=1, col=1)
fig.update_yaxes(title_text="Count", row=1, col=2)

fig.update_layout(
    title = {
        'text' : f"Distribution of Average BMI of patients who do and do not take BP Meds",
        'x' : 0.5,
        'y' : 0.97,
        'font_size' : 18
    },
)

# The two histograms are drawn on top of another
fig.show()

ttest, p = ttest_ind(meds, no_meds, equal_var=False)

ttest, p

def student_t_test(sample1, sample2):

    n1 = len(sample1)
    n2 = len(sample2)
    x1 = np.mean(sample1)
    x2 = np.mean(sample2)
    s1 = np.std(sample1)
    s2 = np.std(sample2)


    t_stat = abs(x1 - x2) / np.sqrt((np.power(s1, 2) / n1) + (np.power(s2, 2) / n2))

    df = n1 + n2 - 2
    #df = (s1**2 / n1 + s2**2 / n2)**2 / ((s1**2 / n1)**2 / (n1 - 1) + (s2**2 / n2)**2 / (n2 - 1))

    p_value = 2 * (1 - t.cdf(np.abs(t_stat), df=df))

    return t_stat, p_value
  
student_t_test(meds, no_meds)

"""#### The t-statistic is 5.59, which indicates that there is a significant difference in the mean BMI between patients who take blood pressure medication and those who do not. The p-value is very small (1.29e-07), which indicates strong evidence against the null hypothesis that there is no difference in mean BMI between the two groups. Therefore, we can reject the null hypothesis and conclude that there is a significant difference in the average BMI between patients who take blood pressure medication and those who do not. Specifically, it appears that patients who take blood pressure medication have a higher mean BMI compared to those who do not.

#### **6. What is the relationship between age and the total cholesterol levels of patients?**
"""

fig = px.scatter(h_d_no_outl, x="age", y="totChol", title="Age vs Total Cholesterol")

fig.show()

age = df['age']
totChol = df['totChol']
n = len(age)

mean_age = np.mean(age)
mean_totChol = np.mean(totChol)

sum_of_products = np.sum((age - mean_age) * (totChol - mean_totChol))

sum_of_squares_age = np.sum((age - mean_age)**2)
sum_of_squares_totChol = np.sum((totChol - mean_totChol)**2)

correlation = sum_of_products / np.sqrt(sum_of_squares_age * sum_of_squares_totChol)

print(f"Correlation coefficient between age and total cholesterol levels: {correlation:.2f}")

"""Since the Correlation coefficient between age and total cholesterol levels is 0.27 so we can say that there is no relation between age and total cholesterol levels.

#### **7. Is there a significant difference in systolic blood pressure between male and female patients?**
"""

male_bp = df[df['male'] == 1]['sysBP']
female_bp = df[df['male'] == 0]['sysBP']

t_stat, p_value = ttest_ind(male_bp, female_bp)

print(f"t-statistic: {t_stat:.2f}, p-value: {p_value:.5f}")

"""The t-test was conducted to determine if there is a significant difference in systolic blood pressure between male and female patients. The negative t-statistic value (-1.81) suggests that the mean systolic blood pressure is lower in female patients than in male patients. The p-value of 0.07089 is greater then the  significance level of 0.05, indicating no statistically significant difference between male and female patients.

**8. What is the average heart rate of patients with diabetes compared to those without diabetes? Is there a significance difference between them?**
"""

diabetes_hr = h_d_no_outl[h_d_no_outl['diabetes'] == 1]['heartRate']
no_diabetes_hr = h_d_no_outl[h_d_no_outl['diabetes'] == 0]['heartRate']

mean_diabetes_hr = diabetes_hr.mean()
std_diabetes_hr = diabetes_hr.std()
n_diabetes_hr = len(diabetes_hr)

mean_no_diabetes_hr = no_diabetes_hr.mean()
std_no_diabetes_hr = no_diabetes_hr.std()
n_no_diabetes_hr = len(no_diabetes_hr)

t_stat, p_value = ttest_ind(diabetes_hr, no_diabetes_hr)

print(f"Average Heart rate patients having diabetes    : {mean_diabetes_hr}")
print(f"Average Heart rate patients not having diabetes: {mean_no_diabetes_hr}")


print(f"t-statistic: {t_stat:.2f}, p-value: {p_value:.5f}")

"""#### The p-value of 0.00131 is less than the common threshold for statistical significance of 0.05, indicating that we can reject the null hypothesis that there is no difference in the average heart rate between the two groups. Therefore, we can conclude that patients with diabetes have a significantly different average heart rate compared to those without diabetes.

#### **9. Is there a relationship between the number of cigarettes smoked per day and systolic blood pressure?**
"""

cigs_per_day = h_d_no_outl['cigsPerDay']
systolic_bp = h_d_no_outl['sysBP']

corr_coef = np.corrcoef(cigs_per_day, systolic_bp)[0, 1]

fig = px.scatter(h_d_no_outl, x="cigsPerDay", y="sysBP")
fig.update_xaxes(title="Cigarettes per day")
fig.update_yaxes(title="Systolic blood pressure")

fig.update_layout(
    title = {
        'text' : f"Correlation coefficient: {corr_coef:.2f}",
        'x' : 0.5,
        'y' : 0.98
    },
    height = 400, width = 900
    )
fig.show()

"""The correlation coefficient between the number of cigarettes smoked per day and systolic blood pressure was found to be -0.09. This suggests a weak negative correlation between the two variables, indicating that as the number of cigarettes smoked per day increases, systolic blood pressure tends to slightly decrease. However, the correlation coefficient value is relatively small, indicating that the relationship between the two variables is not very strong. Therefore, while there is some association between cigarette smoking and systolic blood pressure, the effect size is weak.

#### **10.Destribution of age in the dataset in terms of Gender**
"""

fig = px.histogram(df, x='age', nbins=30, color = "male",  title='Age Distribution')

fig.update_layout(
    title = {
        'text' : "Destribution of Age",
        'x'    : 0.5, 
        'y'    : 0.96,
        'font_size' : 22
    },
    width = 1200
)

fig.show()

"""From  the above plot we can see that the destribution is rightly skewed and the majority of the people are between the age 38 - 43. Also based on the group we can analyze that majority number of people are female.

#### **11. Distribution of education levels Inerms of Gender**
"""

fig = px.histogram(df, x='education', color = "male")

sort_category = np.sort(df['education'].unique())

fig.update_layout(
    title = {
        'text' : "Distribution of Education Levels",
        'x'    : 0.5, 
        'y'    : 0.96,
        'font_size' : 22
    },
    width = 1200,
    xaxis_title_font = {'size' : 16},
    yaxis_title_font = {'size' : 16}
)
fig.update_xaxes(type='category', categoryorder='array', categoryarray=sort_category)

fig.show()

"""The distribution of education levels indicates that the majority of individuals in the dataset have an education rank of 1. Additionally, among all the education categories, category 4 stands out as having a higher proportion of males compared to females.

This observation suggests that there is an imbalance in the distribution of education levels, with a significant number of individuals falling into the education rank 1 category.

#### **12. Destribution of smokers interms of Gender**
"""

fig = px.histogram(df, x='currentSmoker', color = "male", text_auto = True)

sort_category = np.sort(df['currentSmoker'].unique())

fig.update_layout(
    title = {
        'text' : "Destribution of smokers",
        'x'    : 0.5, 
        'y'    : 0.96,
        'font_size' : 22
    },
    width = 1200,
    xaxis={
        'tickvals': [0, 1], 
        'ticktext': ['Non Smoker', 'Smoker'], 
        'title': '',
        'tickfont' : {'size': 16}
    },
    yaxis_title_font = {'size' : 16}
)

fig.update_xaxes(type='category', categoryorder='array', categoryarray=sort_category)

fig.show()

"""This count distribution indicates a gender disparity in smoking behavior within the dataset, with a higher proportion of females abstaining from smoking compared to males. However, among smokers, the difference in the count between males and females is less pronounced, suggesting a relatively comparable proportion of male and female smokers.

#### **13. Is there a significant difference in the proportion of smokers between males and females?**
"""

my_observe = cross_tab(df['currentSmoker'], df['male'])
my_expected = to_expected(my_observe) 


observe = pd.crosstab(df['currentSmoker'], df['male'])

chi_square,p_value,_,_ = chi2_contingency(observe, correction=False)

HC_chi_square, HC_p_values = chi_2_t(my_observe, my_expected)


print("Built in : ", chi_square,p_value)
print("Ours     : ", HC_chi_square, HC_p_values)

"""The chi-square test for assosiation yielded a test statistic of 165.47 and an extremely low p-value of 7.22e-38. Based on these results, we can conclude that there is a significant association between gender and smoking status in the dataset.

The low p-value indicates strong evidence against the null hypothesis, suggesting that the proportion of smokers differs significantly between males and females. Therefore, we reject the null hypothesis and accept the alternative hypothesis, which suggests a notable difference in smoking prevalence based on gende

#### **14. distribution of the target variable (TenYearCHD)**
"""

have_TenYearCHD = df[df.TenYearCHD == 1]
not_have_TenYearCHD = df[df.TenYearCHD == 0]

male_chd_count = have_TenYearCHD[have_TenYearCHD['male'] == 1].shape[0]
female_chd_count = have_TenYearCHD[have_TenYearCHD['male'] == 0].shape[0]

male_not_chd_count = not_have_TenYearCHD[not_have_TenYearCHD['male'] == 1].shape[0]
female_not_chd_count = not_have_TenYearCHD[not_have_TenYearCHD['male'] == 0].shape[0]

labels_chd = ['Male', 'Female']
values_chd = [male_chd_count, female_chd_count]

labels_not_chd = ['Male', 'Female']
values_not_chd = [male_not_chd_count, female_not_chd_count]

fig = make_subplots(rows=1, cols=2, 
                    subplot_titles=['TenYearCHD - Gender Distribution', 'No TenYearCHD - Gender Distribution'], 
                    specs=[[{"type": "pie"}, {"type": "pie"}]])

fig.add_trace(go.Pie(labels=labels_chd, values=values_chd, textinfo='label+percent'), row=1, col=1)
fig.add_trace(go.Pie(labels=labels_not_chd, values=values_not_chd, textinfo='label+percent'), row=1, col=2)

fig.update_annotations(yshift=20)

fig.update_layout(
    width = 1000
)
fig.show()

"""The distribution of gender among individuals with TenYearCHD (Ten-Year Risk of Coronary Heart Disease) shows that approximately 46.7% are female and 53.3% are male. On the other hand, the distribution of gender among individuals without TenYearCHD indicates that approximately 58.9% are female and 41.1% are male.

This suggests that there may be a difference in the gender distribution between those with and without TenYearCHD. Females seem to be more prevalent in both groups, but the difference is more pronounced among individuals without TenYearCHD.

#### **15.  relationship between age and cigsperday.**
"""

correlation = df['age'].corr(df['cigsPerDay'])

fig = px.scatter(df, x='age', y='cigsPerDay', trendline='ols', color = 'male')

fig.update_layout(
    title = {
        'text' : f"Relationship between Age and Cigarettes Per Day {correlation : .2f}",
        'x'    : 0.5, 
        'y'    : 0.96,
        'font_size' : 18
    },
    xaxis_title='Age',
    yaxis_title='Cigarettes Per Day',
    width = 1000,
    height = 500
)



fig.show()

"""From the above destribution we can conclude that as the age increases, there tends to be a slight decrease in the number of cigarettes smoked per day. However, the correlation is weak, suggesting that the relationship between age and cigarette consumption is not strongly linear.

#### **16. Variation Heart Rate across AGE groups**
"""

correlation = df['age'].corr(df['heartRate'])

fig = px.scatter(df, x='age', y='heartRate', trendline='ols', color = 'male')

fig.update_layout(
    title = {
        'text' : f"Relationship between Age and heartRate {correlation : .2f}",
        'x'    : 0.5, 
        'y'    : 0.96,
        'font_size' : 18
    },
    xaxis_title='Age',
    yaxis_title='heartRate',
    width = 1000,
    height = 500
)



fig.show()

"""The correlation coefficient between age and heart rate in the dataset is -0.01. This indicates a very weak or negligible linear relationship between these variables. The correlation coefficient being close to zero suggests that there is no substantial linear association or dependence between age and heart rate."""